"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUserDTO = exports.linkAccountDTO = exports.createTwitterAccountDTO = exports.twitterAccountDTO = exports.newTweetDTO = exports.editTweetDTO = exports.tweetDTO = exports.newTweetDAO = exports.editTweetDAO = exports.activeTweetsDAO = exports.deleteTweetDAO = exports.tweetDAO = exports.usersDAO = exports.twitterAccountsDAO = exports.twitterAccountAccessDAO = exports.tweetManager = exports.twitterAccountAuthorizationManager = exports.userManager = exports.twitterAccountManager = exports.tweetController = exports.accountController = exports.tweetRouter = exports.accountRouter = exports.cryptography = exports.userVerification = exports.twitterAccountVerification = exports.twitterAppKeys = exports.twitterMessenger = exports.twitterAccountAuthorization = exports.rateLimiter = exports.serialization = exports.localStrategy = exports.sql = exports.database = void 0;
var path = require("path");
var loginServicesPath = path.join(process.cwd(), 'built', 'model', 'services', 'login');
var messageServicesPath = path.join(process.cwd(), 'built', 'model', 'services', 'message');
var routerPath = path.join(process.cwd(), 'built', 'routes');
var managersPath = path.join(process.cwd(), 'built', 'model', 'managers');
var DALpath = path.join(process.cwd(), 'built', 'model', 'dto');
var controllersPath = path.join(process.cwd(), 'built', 'controllers');
exports.database = path.join(process.cwd(), 'built', 'model', 'database');
exports.sql = path.join(process.cwd(), 'built', 'model', 'sql', 'sql');
exports.localStrategy = path.join(loginServicesPath, 'localStrategy');
exports.serialization = path.join(loginServicesPath, 'serialization');
exports.rateLimiter = path.join(loginServicesPath, 'rateLimiter');
exports.twitterAccountAuthorization = path.join(messageServicesPath, 'twitterAccountAuthorization');
exports.twitterMessenger = path.join(messageServicesPath, 'twitterMessenger');
exports.twitterAppKeys = path.join(messageServicesPath, 'twitterAppKeys');
exports.twitterAccountVerification = path.join(process.cwd(), 'built', 'model', 'services', 'verification', 'twitterAccountVerification');
exports.userVerification = path.join(process.cwd(), 'built', 'model', 'services', 'verification', 'userVerification');
exports.cryptography = path.join(process.cwd(), 'built', 'model', 'services', 'cryptography');
exports.accountRouter = path.join(routerPath, 'accountRouter');
exports.tweetRouter = path.join(routerPath, 'tweetRouter');
exports.accountController = path.join(controllersPath, 'accountController');
exports.tweetController = path.join(controllersPath, 'tweetController');
exports.twitterAccountManager = path.join(managersPath, 'twitterAccountManager');
exports.userManager = path.join(managersPath, 'userManager');
exports.twitterAccountAuthorizationManager = path.join(managersPath, 'message', 'twitterAccountAuthorizationManager');
exports.tweetManager = path.join(managersPath, 'tweetManager');
exports.twitterAccountAccessDAO = path.join(DALpath, 'accounts', 'twitterAccountAccessDAO');
exports.twitterAccountsDAO = path.join(DALpath, 'accounts', 'twitterAccountsDAO');
exports.usersDAO = path.join(DALpath, 'accounts', 'usersDAO');
exports.tweetDAO = path.join(DALpath, 'tweets', 'tweetDAO');
exports.deleteTweetDAO = path.join(DALpath, 'tweets', 'deleteTweetDAO');
exports.activeTweetsDAO = path.join(DALpath, 'tweets', 'activeTweetsDAO');
exports.editTweetDAO = path.join(DALpath, 'tweets', 'editTweetDAO');
exports.newTweetDAO = path.join(DALpath, 'tweets', 'newTweetDAO');
exports.tweetDTO = path.join(DALpath, 'tweets', 'tweetDTO');
exports.editTweetDTO = path.join(DALpath, 'tweets', 'editTweetDTO');
exports.newTweetDTO = path.join(DALpath, 'tweets', 'newTweetDTO');
exports.twitterAccountDTO = path.join(DALpath, 'accounts', 'twitterAccountDTO');
exports.createTwitterAccountDTO = path.join(DALpath, 'accounts', 'createTwitterAccountDTO');
exports.linkAccountDTO = path.join(DALpath, 'accounts', 'linkAccountDTO');
exports.createUserDTO = path.join(DALpath, 'accounts', 'createUserDTO');
